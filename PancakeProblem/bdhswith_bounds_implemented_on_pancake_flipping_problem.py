# -*- coding: utf-8 -*-
"""BDHSwith bounds implemented on pancake-flipping problem.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-Rm0Qci6aWO9ywrjfkTsdiqYWiR61HvJ
"""

import random
import heapq
import math
import sys
from collections import defaultdict, deque, Counter
from itertools import combinations
import copy


#############################################################################################
class Problem(object):
    """The abstract class for a formal problem. A new domain subclasses this,
    overriding `actions` and `results`, and perhaps other methods.
    The default heuristic is 0 and the default action cost is 1 for all states.
    When yiou create an instance of a subclass, specify `initial`, and `goal` states 
    (or give an `is_goal` method) and perhaps other keyword args for the subclass."""

    def __init__(self, initial=None, goal=None, **kwds): 
        self.__dict__.update(initial=initial, goal=goal, **kwds) 
        
    def actions(self, state):        raise NotImplementedError
    def result(self, state, action): raise NotImplementedError
    def is_goal(self, state):        return state == self.goal
    def action_cost(self, s, a, s1): return 1
    def h(self, state):               return 0
    
    def __str__(self):
        return '{}({!r}, {!r})'.format(
            type(self).__name__, self.initial, self.goal)
    

class Node:
    "A Node in a search tree."
    def __init__(self, state, parent=None, action=None, path_cost=0, h=0, f=0, d=0):
        self.__dict__.update(state=state, parent=parent, action=action, path_cost=path_cost, h=h, f=f, d=d)

    def __repr__(self): return '<{}>'.format(self.state)
    def __len__(self): return 0 if self.parent is None else (1 + len(self.parent))
    def __lt__(self, other): return self.path_cost < other.path_cost

#####NOTE: path_cost IS SAME AS g   
    
failure = Node('failure', path_cost= math.inf) # Indicates an algorithm couldn't find a solution.
cutoff  = Node('cutoff',  path_cost= math.inf) # Indicates iterative deepening search was cut off.
    
    
def expand(problem, node):
    "Expand a node, generating the children nodes."
    s = node.state
    for action in problem.actions(s):        
        s1 = problem.result(s, action)        
        cost = node.path_cost + problem.action_cost(s, action, s1)
        h = problem.h(s1)
        f = h + cost
        yield Node(s1, node, action, cost, h, f)
        

def path_actions(node):
    "The sequence of actions to get to this node."
    if node.parent is None:
        return []  
    return path_actions(node.parent) + [node.action]


def path_states(node):
    "The sequence of states to get to this node."
    if node in (cutoff, failure, None): 
        return []
    return path_states(node.parent) + [node.state]


######################################Queues########################################

class PriorityQueue:
    """A queue in which the item with minimum f(item) is always popped first."""

    def __init__(self, items=(), key=lambda x: x): 
        self.key = key
        self.gMin = math.inf
        self.dMin = math.inf 
        self.items = [] # a heap of (score, item) pairs
        for item in items:
            self.add(item)
         
    def add(self, item):
        """Add item to the queuez."""
        pair = (self.key(item), item)
        heapq.heappush(self.items, pair)
        self.gMin = (min(self.items, key= lambda x: x[1].path_cost))[1].path_cost
        self.dMin = (min(self.items, key= lambda x: x[1].d))[1].d
    


    def pop(self):
        """Pop and return the item with min f(item) value."""
        
        return heapq.heappop(self.items)[1]
    
    def top(self): return self.items[0][1]

    def __len__(self): return len(self.items)



################################Search Formulation###########################################
def g(n): return n.path_cost


####################################modified BDS with lower bounds###########################
def d(n,inverseProblem): 
 return (n.path_cost - inverseProblem.h(n.state))

def f(n):
  return (n.path_cost + n.h)

def KKAdd(n,problem,opposite_dMin):
  return (n.f+opposite_dMin)



def bidirectional_generalized_search_withbounds(problem_f, f_f, problem_b, f_b):
    U = math.inf ##best solution cost found so far
    C= 0          ##lower bound of cost
    node_f = Node(problem_f.initial)    
    node_b = Node(problem_f.goal)
    node_f.d = d(node_f,problem_b)            
    node_b.d = d(node_b,problem_f)            
    frontier_f, reached_f = PriorityQueue([node_f], key=f_f), {node_f.state: node_f} #reached_f is close list and frontier_f is open list of front path
    frontier_b, reached_b = PriorityQueue([node_b], key=f_b), {node_b.state: node_b}
    solution = failure
    while frontier_f and frontier_b :                                                    
        if C >= U:
          return solution     ##when the best cost is lower that lower bound of cost estimation we can return the solution as optimum
        if f_f(frontier_f.top()) < f_b(frontier_b.top()):
            solution = proceed('f', problem_f, frontier_f, reached_f, reached_b, solution, problem_b )
        else:
            solution = proceed('b', problem_b, frontier_b, reached_b, reached_f, solution, problem_f)
        U=solution.path_cost    #updating the value of u whenever a cheaper solution is found
        C = updateC(C,frontier_f,frontier_b,problem_f.epsilon)   ##also updating lower bound
    return solution

def bidirectional_search_withbounds(problem_f):
  problem_b = inverse_problem(problem_f)
  return bidirectional_generalized_search_withbounds(problem_f, lambda n: f(n),  problem_b, lambda n: f(n))
  
def updateC(C,frontier_f,frontier_b,epsilon):
  nf, nb = frontier_f.top(), frontier_b.top() #f-bounds are calculated from nf and nb
  g_bound = frontier_f.gMin + frontier_b.gMin + epsilon 
  C = max(nf.f,nb.f,g_bound,C)
  return C



def inverse_problem(problem):
  if isinstance(problem, CountCalls):
      return CountCalls(inverse_problem(problem._object))
  else:
      inv = copy.copy(problem)
      inv.initial, inv.goal = inv.goal, inv.initial
      return inv


def proceed(direction, problem, frontier, reached, reached2, solution,inv_problem):
    node = frontier.pop()
    for child in expand(problem, node):
        s = child.state
        if s not in reached or child.path_cost < reached[s].path_cost:            
            ##########initiating d values of each node when it is being added to front and back expansion lists##########
            if (direction == 'f'):
              cur_d = d(child,inv_problem)
              child.d = cur_d
            if (direction == 'b'):
              cur_d = d(child,inv_problem)
              child.d = cur_d
            frontier.add(child)
            ###############################
            reached[s] = child
            if s in reached2: # node found in both path; solution found
                solution2 = (join_nodes(child, reached2[s]) if direction == 'f' else
                             join_nodes(reached2[s], child))
                if solution2.path_cost < solution.path_cost:
                    solution = solution2
    return solution

S = path_states

def join_nodes(nf, nb):
    """Join the reverse of the backward node nb to the forward node nf."""
    join = nf
    while nb.parent is not None:
        cost = join.path_cost + nb.path_cost - nb.parent.path_cost
        join = Node(nb.parent.state, join, nb.action, cost)
        nb = nb.parent
    return join



############################End of search formulation#############################################
class CountCalls:
    """Delegate all attribute gets to the object, and count them in ._counts"""
    def __init__(self, obj):
        self._object = obj
        self._counts = Counter()
        
    def __getattr__(self, attr):
        "Delegate to the original object, after incrementing a counter."
        self._counts[attr] += 1
        return getattr(self._object, attr)

        
def report(searchers, problems, verbose=True):
    """Show summary statistics for each searcher (and on each problem unless verbose is false)."""
    for searcher in searchers:
        print(searcher.__name__ + ':')
        total_counts = Counter()
        for p in problems:
            prob   = CountCalls(p)
            soln   = searcher(prob)
            counts = prob._counts; 
            counts.update(actions=len(soln), cost=soln.path_cost)
            total_counts += counts
            if verbose: report_counts(counts, str(p)[:40])
        report_counts(total_counts, 'TOTAL\n')
        
def report_counts(counts, name):
    """Print one line of the counts report."""
    print('{:9,d} nodes |{:9,d} goal |{:5.0f} cost |{:8,d} actions | {}'.format(
          counts['result'], counts['is_goal'], counts['cost'], counts['actions'], name))

####################Problem formulation#################
class PancakeProblem(Problem):
    """A PancakeProblem the goal is always `tuple(range(1, n+1))`, where the
    initial state is a permutation of `range(1, n+1)`. An act is the index `i` 
    of the top `i` pancakes that will be flipped."""
    
    def __init__(self, initial): 
        self.initial, self.goal = tuple(initial), tuple(sorted(initial))
        self.epsilon = 2
        self.iota = 1
    
    def actions(self, state): return range(2, len(state) + 1)

    def result(self, state, i): return state[:i][::-1] + state[i:]

    
    def action_cost(self, state, i, state1):
      return i
      

    def h(self, state):
        "The gap heuristic."
        s = state
        return sum(abs(s[i] - s[i - 1]) > 1 for i in range(1, len(s))) 
  
  #######################calling search#############################################

c0 = PancakeProblem((2, 1, 5, 7, 4, 3, 8, 9, 6))
path_states(bidirectional_search_withbounds(c0))



## referenced from https://github.com/aimacode/aima-python/blob/master/search4e.ipynb